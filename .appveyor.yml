version: '2.4.5.{build}'

# Do not build on tags (GitHub only)
skip_tags: true
clone_depth: 1

only_commits:
  message: /build/

environment:
  matrix:
  - job_name: windows
    appveyor_build_worker_image: Visual Studio 2019
  - job_name: macos
    appveyor_build_worker_image: macos
  - job_name: linux
    appveyor_build_worker_image: Ubuntu1604
#  - job_name: rpi
#    appveyor_build_worker_image: Ubuntu1604

branches:
  only:
    - master     
        
stack:
  python 3.8

#environment:
#  GITHUB_TOKEN:
#    secure: 9UB76Z8mCWYt1u7Ci2fPVNiI3iK3LzTuIPhtNGBbxKP7YOPaUuq2yHxRjIfRPEAx
#  UPLOADTOOL_BODY:
#    "WARNING: pre-release builds may not work. Use at your own risk.”


for:
-
  matrix:
    only:
      - job_name: windows
#  image: Visual Studio 2019

  environment:
    PYTHON: "C:\\Python38-x64"
    PYTHON_VERSION: 3.8.x
#    ARTISAN_VERSION: 2.4.5
    #ARTISAN_VERSION: ${APPVEYOR_BUILD_VERSION}

  install:
    - echo 'Windows Install'
#    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
#    - "%PYTHON%\\python.exe -m pip install --upgrade pip"
#    - "%PYTHON%\\python.exe -m pip install wheel"
#    - "%PYTHON%\\python.exe -m pip install .ci\\pyinstaller-4.1+f9eeaaf9c0-py3-none-any.whl"
#  ## start: build the pyinstaller bootloader and install (using the default VS 2015)
#  #  - curl -L -O https://github.com/pyinstaller/pyinstaller/releases/download/v%PYINSTALLER_VER%/PyInstaller-%PYINSTALLER_VER%.tar.gz
#  #  - tar xzf PyInstaller-%PYINSTALLER_VER%.tar.gz
#  #  - del PyInstaller-%PYINSTALLER_VER%.tar.gz
#  #  - cd pyinstaller-%PYINSTALLER_VER%\bootloader
#  #  - "%PYTHON%\\python.exe ./waf all --target-arch=64bit"
#  #  - cd ..
#  #  - "%PYTHON%\\python.exe setup.py install"
#  #  - cd ..
#  ## end: build the pyinstaller bootloader and install
#    - "%PYTHON%\\python.exe -m pip install -r src\\requirements.txt"
#    - "%PYTHON%\\python.exe -m pip install -r src\\requirements-win.txt"
#    - curl -L -O https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
#  #  - curl -k -L -O https://kent.dl.sourceforge.net/project/snap7/1.4.2/snap7-full-1.4.2.7z
#    - curl -k -L -O https://netcologne.dl.sourceforge.net/project/snap7/1.4.2/snap7-full-1.4.2.7z
#    - 7z x snap7-full-1.4.2.7z
#    - copy snap7-full-1.4.2\build\bin\win64\snap7.dll c:\windows
#    - curl -k -L -O https://netcologne.dl.sourceforge.net/project/libusb-win32/libusb-win32-releases/1.2.6.0/libusb-win32-bin-1.2.6.0.zip
#    - 7z x libusb-win32-bin-1.2.6.0.zip
#    - copy libusb-win32-bin-1.2.6.0\bin\amd64\libusb0.dll C:\Windows\SysWOW64
#  # Phidget Python lib no installed via pip
#  #  - curl -L -O https://www.phidgets.com/downloads/phidget22/libraries/any/Phidget22Python.zip
#  #  - 7z x Phidget22Python.zip
#  #  - cd Phidget22Python
#  #  - python setup.py install
#  #  - cd ..

  build_script:
    - echo 'Windows Build.
#    - cmd: cd src
#    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
#    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
#    - ps: move -force newfile artisanlib/__init__.py
#    - cmd: FOR /F "usebackq delims==" %%a IN (`python -c "import artisanlib; print(artisanlib.__version__)"`) DO (set ARTISAN_VERSION=%%~a)
#    - ps: gc setup-install3-pi.nsi | %{ $_ -replace "!define PRODUCT_VERSION.*", "!define PRODUCT_VERSION ""$Env:ARTISAN_VERSION.0""" } | out-file newfile -encoding ascii -force
#    - ps: move -force newfile setup-install3-pi.nsi
#    - cmd: build-win3-pi.bat
#    - cmd: copy ..\LICENSE LICENSE.txt
#    - cmd: 7z a artisan-win-%ARTISAN_VERSION%.zip Setup*.exe LICENSE.txt README.txt

#  artifacts:
#    - path: 'src\artisan-*.zip'

#  deploy_script:
#    - cmd: curl -L -O https://github.com/rpaulo/uploadtool/raw/master/upload.sh
#    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
#    - export UPLOADTOOL_ISPRERELEASE=true
#    - cmd: bash upload.sh artisan-*.zip


-
  matrix:
    only:
      - job_name: macos

  environment:
#    image: macos
    ARTISAN_OS: osx
    PYTHON: ~/venv3.8
    language: generic
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_ANALYTICS: 1
    MACOSX_DEPLOYMENT_TARGET: 10.15

  install:
    - echo "MacOS Install"  
#    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
#    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
#    - chmod 777 ./.ci/*.sh
#    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "MacOS Build"  
#    - chmod 777 src/*.sh
#    - .ci/script-${ARTISAN_OS}.sh
    
#  artifacts:
#    - path: 'src/artisan-*.dmg'

#  deploy_script:
#    - cd src
#    - cmd: curl -L -O https://github.com/rpaulo/uploadtool/raw/master/upload.sh
#    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
#    - export UPLOADTOOL_ISPRERELEASE=true
#    - cmd: bash upload.sh artisan-*.dmg

-
  matrix:
    only:
      - job_name: linux
#    fast_finish: true

  environment:
#    image: Ubuntu1604
    ARTISAN_OS: linux
    PYTHON: $HOME/venv3.8
  install:
    - echo "Linux Install"  
#    - chmod 777 ./.ci/*.sh
#    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
#    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
#    - .ci/install-${ARTISAN_OS}.sh
  build_script:
    - echo "Linux Build"  
#    - chmod 777 src/*.sh
#    - .ci/script-${ARTISAN_OS}.sh

#  artifacts:
#    - path: 'src/artisan-*.deb'
#    - path: 'src/artisan-*.rpm'

#  deploy_script:
#    - cd src
#    - cmd: curl -L -O https://github.com/rpaulo/uploadtool/raw/master/upload.sh
#    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
#    - export UPLOADTOOL_ISPRERELEASE=true
#    - cmd: bash upload.sh artisan-*.deb
#    - cmd: bask upload.sh artisan-*.rpm

-
  matrix:
    only:
      - job_name: rpi
#  image: Ubuntu1604
#    fast_finish: true

  environment:
    ARTISAN_OS: rpi
    PYTHON: $HOME/venv3.8
  install:
    - echo "RPI Install"  
    - chmod 777 ./.ci/*.sh
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    - .ci/install-${ARTISAN_OS}.sh
  build_script:
    - echo "RPI Build"  
    - chmod 777 src/*.sh
    - .ci/script-${ARTISAN_OS}.sh
#  artifacts:
#    - path: 'src/artisan-*.deb'

#  deploy_script:
#    - cd src
#    - cmd: curl -L -O https://github.com/rpaulo/uploadtool/raw/master/upload.sh
#    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
#    - export UPLOADTOOL_ISPRERELEASE=true
#    - cmd: bash upload.sh artisan-*.deb
